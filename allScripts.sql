CREATE TABLE IF NOT EXISTS Sport_place_type (
                                                id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                                name varchar(50) NOT NULL UNIQUE
    );

CREATE TABLE IF NOT EXISTS Sport_place (
                                           id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                           name varchar(150) NOT NULL,
    type_id int NOT NULL REFERENCES Sport_place_type(id) ON DELETE RESTRICT,
    address varchar(100) NOT NULL,
    UNIQUE(name, address)
    );

CREATE TABLE IF NOT EXISTS Coating_type (
                                            id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                            name varchar(50) NOT NULL UNIQUE
    );

CREATE TABLE IF NOT EXISTS Gym (
    place_id int PRIMARY KEY REFERENCES Sport_place(id) ON DELETE CASCADE,
    simulators_count int NOT NULL CHECK(simulators_count>0)
    );

CREATE TABLE IF NOT EXISTS Arena (
    place_id int PRIMARY KEY REFERENCES Sport_place(id) ON DELETE CASCADE,
    area int NOT NULL CHECK(area>0)
    );

CREATE TABLE IF NOT EXISTS Stadium (
    place_id int PRIMARY KEY REFERENCES Sport_place(id) ON DELETE CASCADE,
    capacity int NOT NULL CHECK(capacity>0)
    );

CREATE TABLE IF NOT EXISTS Court (
    place_id int PRIMARY KEY REFERENCES Sport_place(id) ON DELETE CASCADE,
    coating_type_id int NOT NULL REFERENCES Coating_type(id) ON DELETE RESTRICT
    );

CREATE TABLE IF NOT EXISTS Organizer (
                                         id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                         first_name varchar(100) NOT NULL,
    last_name varchar(100) NOT NULL,
    father_name varchar(100)
    );

CREATE TABLE IF NOT EXISTS Sport (
                                     id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                     name varchar(100) NOT NULL UNIQUE,
    description varchar
    );

CREATE TABLE IF NOT EXISTS Competition (
                                           id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                           name varchar(150) NOT NULL,
    sport_id int NOT NULL REFERENCES Sport(id) ON DELETE RESTRICT,
    place_id int NOT NULL REFERENCES Sport_place(id) ON DELETE RESTRICT,
    competition_date date NOT NULL CHECK(extract(year from competition_date) > 1900),
    UNIQUE(name, place_id, competition_date)
    );

CREATE TABLE IF NOT EXISTS Sport_club (
                                          id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                          name varchar(100) NOT NULL UNIQUE,
    creation_date date CHECK(extract(year from creation_date) > 1900)
    );

CREATE TABLE IF NOT EXISTS Athlete (
                                       id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                       first_name varchar(100) NOT NULL,
    last_name varchar(100) NOT NULL,
    father_name varchar(100),
    club_id int REFERENCES Sport_club(id) ON DELETE SET NULL
    );

CREATE TABLE IF NOT EXISTS Organizer_competition (
    organizer_id int REFERENCES Organizer(id) ON DELETE RESTRICT,
    competition_id int REFERENCES Competition(id) ON DELETE CASCADE,
    PRIMARY KEY (competition_id, organizer_id)
    );

CREATE TABLE IF NOT EXISTS Competition_athlete (
    competition_id int REFERENCES Competition(id) ON DELETE RESTRICT,
    athlete_id int REFERENCES Athlete(id) ON DELETE CASCADE,
    place int Not NULL CHECK(place > 0),
    PRIMARY KEY (competition_id, athlete_id)
    );

CREATE TABLE IF NOT EXISTS Sports_rank (
                                           id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                           name varchar(50) NOT NULL UNIQUE
    );

CREATE TABLE IF NOT EXISTS Athlete_sport (
    athlete_id int REFERENCES Athlete(id) ON DELETE CASCADE,
    sport_id int REFERENCES Sport(id) ON DELETE RESTRICT,
    sports_rank_id int REFERENCES Sports_rank(id) ON DELETE RESTRICT,
    PRIMARY KEY (athlete_id, sport_id)
    );

CREATE TABLE IF NOT EXISTS Trainer (
                                       id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                       first_name varchar(100) NOT NULL,
    last_name varchar(100) NOT NULL,
    father_name varchar(100)
    );

CREATE TABLE IF NOT EXISTS Trainer_athlete (
    trainer_id int REFERENCES Trainer(id) ON DELETE CASCADE,
    athlete_id int REFERENCES Athlete(id) ON DELETE CASCADE,
    sport_id int REFERENCES Sport(id) ON DELETE RESTRICT,
    PRIMARY KEY (athlete_id, trainer_id, sport_id)
    );

CREATE TABLE IF NOT EXISTS Trainer_qualification (
                                                     id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                                                     name varchar(50) NOT NULL UNIQUE
    );

CREATE TABLE IF NOT EXISTS Trainer_sport (
    trainer_id int REFERENCES Trainer(id) ON DELETE CASCADE,
    sport_id int REFERENCES Sport(id) ON DELETE RESTRICT,
    qualification_id int REFERENCES Trainer_qualification(id) ON DELETE RESTRICT,
    PRIMARY KEY (trainer_id, sport_id)
    );

-- Заполнение таблицы Sport_place_type
INSERT INTO Sport_place_type (name) VALUES
                                        ('Gym'),
                                        ('Arena'),
                                        ('Stadium'),
                                        ('Court');

-- Заполнение таблицы Sport_place
INSERT INTO Sport_place (name, type_id, address) VALUES
                                                     ('Tennis Club', 4, '10 Park Avenue'),
                                                     ('Jumping arena', 2, '15 Lake Street'),
                                                     ('Soccer Field', 3, '20 Stadium Road'),
                                                     ('Fitness Studio', 2, '25 Gym Street'),
                                                     ('Running Track', 3, '30 Jogging Lane'),
                                                     ('Boxing Gym', 1, '35 Fight Street'),
                                                     ('Basketball Court', 4, '40 Court Avenue'),
                                                     ('Volleyball Court', 4, '45 Beach Road');

-- Заполнение таблицы Coating_type
INSERT INTO Coating_type (name) VALUES
                                    ('Parquet'),
                                    ('Grass'),
                                    ('Rubber Flooring'),
                                    ('Sand');

-- Заполнение таблицы Gym
INSERT INTO Gym (place_id, simulators_count) VALUES
    (6, 12);

-- Заполнение таблицы Arena
INSERT INTO Arena (place_id, area) VALUES
                                       (2, 800),
                                       (4, 1000);

-- Заполнение таблицы Stadium
INSERT INTO Stadium (place_id, capacity) VALUES
                                             (3, 10000),
                                             (5, 12000);

-- Заполнение таблицы Court
INSERT INTO Court (place_id, coating_type_id) VALUES
                                                  (1, 3),
                                                  (7, 1),
                                                  (8, 1);

-- Заполнение таблицы Organizer
INSERT INTO Organizer (first_name, last_name, father_name) VALUES
                                                               ('William', 'Robinson', 'Sr.'),
                                                               ('Harper', 'Perez', 'Jr.'),
                                                               ('Evelyn', 'Reed', 'Sr.'),
                                                               ('Jacob', 'Turner', 'Jr.'),
                                                               ('Olivia', 'Harris', 'Sr.'),
                                                               ('Lucas', 'Lee', 'Jr.');
INSERT INTO Organizer (first_name, last_name) VALUES
                                                  ('Benjamin', 'Cook'),
                                                  ('Liam', 'Cooper');


-- Заполнение таблицы Sport
INSERT INTO Sport (name, description) VALUES
                                          ('Tennis', 'Racket sport played individually against a single opponent (singles) or between two teams of two players each (doubles)'),
                                          ('Swimming', 'Sport in water'),
                                          ('Soccer', 'Team sport played with a spherical ball between two teams of 11 players each'),
                                          ('Running', 'Activity of moving rapidly on foot, especially as a sport'),
                                          ('Boxing', 'Combat sport in which two people, usually wearing protective gloves and other protective equipment such as hand wraps and mouthguards, throw punches at each other for a predetermined amount of time in a boxing ring'),
                                          ('Basketball', 'Indoor or outdoor sport with a ball and a hoop'),
                                          ('Volleyball', 'Team sport in which two teams of six players are separated by a net'),
                                          ('Gymnastics', 'Sport involving exercises and performance feats requiring physical strength, flexibility, and kinesthetic awareness');

-- Заполнение таблицы Competition
INSERT INTO Competition (name, sport_id, place_id, competition_date) VALUES
                                                                         ('Tennis Tournament', 1, 1, '2023-08-20'),
                                                                         ('Soccer League', 3, 3, '2023-09-30'),
                                                                         ('Running Race', 4, 5, '2023-10-15'),
                                                                         ('Boxing Championship', 5, 6, '2023-11-05'),
                                                                         ('Basketball Tournament', 6, 7, '2023-12-01'),
                                                                         ('Volleyball Cup', 7, 8, '2022-01-15'),
                                                                         ('Gymnastics Competition', 8, 4, '2022-02-20');

-- Заполнение таблицы Sport_club
INSERT INTO Sport_club (name, creation_date) VALUES
                                                 ('Tennis Club A', '2010-01-01'),
                                                 ('Soccer Club C', '2008-11-20'),
                                                 ('Running Club D', '2013-02-15'),
                                                 ('Boxing Club E', '2007-09-30'),
                                                 ('Basketball Club F', '2015-07-20'),
                                                 ('Volleyball Club G', '2011-04-05'),
                                                 ('Gymnastics Club H', '2018-10-12');

-- Заполнение таблицы Athlete
INSERT INTO Athlete (first_name, last_name, father_name, club_id) VALUES
                                                                      ('Michael', 'Johnson', 'Sr.', 1),
                                                                      ('Emily', 'Wilson', 'Jr.', 2),
                                                                      ('Sophia', 'Martinez', 'Sr.', 1),
                                                                      ('Ava', 'Lewis', 'Jr.', 2);
INSERT INTO Athlete (first_name, last_name, club_id) VALUES
                                                         ('David', 'Brown', 3),
                                                         ('Olivia', 'Davis', 3);
INSERT INTO Athlete (first_name, last_name, father_name) VALUES
                                                             ('Noah', 'Garcia', 'Jr.'),
                                                             ('Ethan', 'Clark', 'Sr.');

-- Заполнение таблицы Organizer_competition
INSERT INTO Organizer_competition (organizer_id, competition_id) VALUES
                                                                     (1, 1),
                                                                     (2, 2),
                                                                     (3, 3),
                                                                     (4, 4),
                                                                     (5, 5),
                                                                     (6, 6),
                                                                     (7, 7);

-- Заполнение таблицы Competition_athlete
INSERT INTO Competition_athlete (competition_id, athlete_id, place) VALUES
                                                                        (1, 1, 1),
                                                                        (1, 2, 2),
                                                                        (2, 3, 3),
                                                                        (2, 4, 1),
                                                                        (3, 5, 2),
                                                                        (3, 6, 3),
                                                                        (4, 7, 1),
                                                                        (4, 8, 2);

-- Заполнение таблицы Sports_rank
INSERT INTO Sports_rank (name) VALUES
                                   ('third youth category'),
                                   ('second youth category'),
                                   ('first youth category'),
                                   ('third category'),
                                   ('second category'),
                                   ('first category'),
                                   ('candidate for master of sports'),
                                   ('international master of sports');

-- Заполнение таблицы Athlete_sport
INSERT INTO Athlete_sport (athlete_id, sport_id, sports_rank_id) VALUES
                                                                     (1, 1, 1),
                                                                     (2, 2, 2),
                                                                     (3, 3, 3),
                                                                     (4, 4, 1),
                                                                     (5, 5, 2),
                                                                     (6, 6, 3),
                                                                     (7, 7, 4),
                                                                     (8, 8, 5);

-- Заполнение таблицы Trainer
INSERT INTO Trainer (first_name, last_name, father_name) VALUES
                                                             ('Matthew', 'Thomas', 'Sr.'),
                                                             ('Ava', 'Gonzalez', 'Jr.'),
                                                             ('Isabella', 'Hernandez', 'Sr.'),
                                                             ('James', 'Clark', 'Jr.'),
                                                             ('Jacob', 'Rodriguez', 'Sr.'),
                                                             ('Sophia', 'Young', 'Jr.');
INSERT INTO Trainer (first_name, last_name) VALUES
                                                ('Ethan', 'Lopez'),
                                                ('Mia', 'Lewis');

-- Заполнение таблицы Trainer_athlete
INSERT INTO Trainer_athlete (trainer_id, athlete_id, sport_id) VALUES
                                                                   (1, 1, 1),
                                                                   (2, 2, 1),
                                                                   (3, 3, 3),
                                                                   (4, 4, 4),
                                                                   (5, 5, 5),
                                                                   (6, 6, 6),
                                                                   (7, 7, 7),
                                                                   (8, 8, 8);

-- Заполнение таблицы Trainer_qualification
INSERT INTO Trainer_qualification (name) VALUES
                                             ('the third category'),
                                             ('the second category'),
                                             ('the first category'),
                                             ('highest category');

-- Заполнение таблицы Trainer_sport
INSERT INTO Trainer_sport (trainer_id, sport_id, qualification_id) VALUES
                                                                       (1, 1, 1),
                                                                       (2, 2, 2),
                                                                       (3, 3, 3),
                                                                       (4, 4, 4),
                                                                       (5, 5, 1),
                                                                       (6, 6, 2),
                                                                       (7, 7, 3),
                                                                       (8, 8, 4);

CREATE OR REPLACE FUNCTION trainer_athlete_insert_trigger_fnc()
    RETURNS trigger AS
$$
BEGIN
    IF NOT EXISTS
        (SELECT 1 FROM Athlete_sport AS a_s
        WHERE a_s.athlete_id = NEW.athlete_id
        AND a_s.sport_id = NEW.sport_id)
    THEN
        INSERT INTO Athlete_sport (athlete_id, sport_id)
        VALUES(NEW.athlete_id, NEW.sport_id);
END IF;
    IF NOT EXISTS
        (SELECT 1 FROM Trainer_sport AS ts
         WHERE ts.trainer_id = NEW.trainer_id
           AND ts.sport_id = NEW.sport_id)
    THEN
        INSERT INTO Trainer_sport (trainer_id, sport_id)
        VALUES(NEW.trainer_id, NEW.sport_id);
END IF;
    RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER trainer_athlete_insert_trigger
    AFTER INSERT ON Trainer_athlete
    FOR EACH ROW
EXECUTE PROCEDURE trainer_athlete_insert_trigger_fnc();

CREATE OR REPLACE FUNCTION gym_insert_trigger_fnc()
    RETURNS trigger AS
$$
DECLARE
sport_place_id integer;
BEGIN
INSERT INTO Sport_place(name, type_id, address)
VALUES(NEW.name, 1, NEW.address);
SELECT sp.id INTO sport_place_id FROM Sport_place AS sp
WHERE sp.name = NEW.name AND sp.address = NEW.address;
INSERT INTO gym(place_id, simulators_count)
VALUES(sport_place_id, NEW.simulators_count);
RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER gym_insert_trigger
    INSTEAD OF INSERT ON Gym_info
    FOR EACH ROW
EXECUTE PROCEDURE gym_insert_trigger_fnc();

CREATE OR REPLACE FUNCTION arena_insert_trigger_fnc()
    RETURNS trigger AS
$$
DECLARE
sport_place_id integer;
BEGIN
INSERT INTO Sport_place(name, type_id, address)
VALUES(NEW.name, 2, NEW.address);
SELECT sp.id INTO sport_place_id FROM Sport_place AS sp
WHERE sp.name = NEW.name AND sp.address = NEW.address;
INSERT INTO arena(place_id, area)
VALUES(sport_place_id, NEW.area);
RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER arena_insert_trigger
    INSTEAD OF INSERT ON Arena_info
    FOR EACH ROW
EXECUTE PROCEDURE arena_insert_trigger_fnc();

CREATE OR REPLACE FUNCTION stadium_insert_trigger_fnc()
    RETURNS trigger AS
$$
DECLARE
sport_place_id integer;
BEGIN
INSERT INTO Sport_place(name, type_id, address)
VALUES(NEW.name, 3, NEW.address);
SELECT sp.id INTO sport_place_id FROM Sport_place AS sp
WHERE sp.name = NEW.name AND sp.address = NEW.address;
INSERT INTO stadium(place_id, capacity)
VALUES(sport_place_id, NEW.capacity);
RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER stadium_insert_trigger
    INSTEAD OF INSERT ON Stadium_info
    FOR EACH ROW
EXECUTE PROCEDURE stadium_insert_trigger_fnc();

CREATE OR REPLACE FUNCTION court_insert_trigger_fnc()
    RETURNS trigger AS
$$
DECLARE
sport_place_id integer;
BEGIN
INSERT INTO Sport_place(name, type_id, address)
VALUES(NEW.name, 4, NEW.address);
SELECT sp.id INTO sport_place_id FROM Sport_place AS sp
WHERE sp.name = NEW.name AND sp.address = NEW.address;
INSERT INTO court(place_id, coating_type_id)
VALUES(sport_place_id, NEW.coating_type_id);
RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER court_insert_trigger
    INSTEAD OF INSERT ON Court_info
    FOR EACH ROW
EXECUTE PROCEDURE court_insert_trigger_fnc();

CREATE OR REPLACE FUNCTION sport_place_delete_trigger_fnc()
    RETURNS trigger AS
$$
BEGIN
DELETE FROM Sport_place WHERE id = OLD.id;
RETURN OLD;
END
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE TRIGGER gym_delete_trigger
    INSTEAD OF DELETE ON Gym_info
    FOR EACH ROW
EXECUTE PROCEDURE sport_place_delete_trigger_fnc();

CREATE OR REPLACE TRIGGER arena_delete_trigger
    INSTEAD OF DELETE ON Arena_info
    FOR EACH ROW
EXECUTE PROCEDURE sport_place_delete_trigger_fnc();

CREATE OR REPLACE TRIGGER stadium_delete_trigger
    INSTEAD OF DELETE ON Stadium_info
    FOR EACH ROW
EXECUTE PROCEDURE sport_place_delete_trigger_fnc();

CREATE OR REPLACE TRIGGER court_delete_trigger
    INSTEAD OF DELETE ON Court_info
    FOR EACH ROW
EXECUTE PROCEDURE sport_place_delete_trigger_fnc();

CREATE OR REPLACE FUNCTION gym_update_trigger_fnc()
    RETURNS trigger AS
$$
BEGIN
UPDATE Sport_place SET name = NEW.name, address = NEW.address
WHERE id = OLD.id;
UPDATE Gym SET simulators_count = NEW.simulators_count
WHERE place_id = OLD.id;
RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER gym_update_trigger
    INSTEAD OF UPDATE ON Gym_info
                          FOR EACH ROW
                          EXECUTE PROCEDURE gym_update_trigger_fnc();

CREATE OR REPLACE FUNCTION arena_update_trigger_fnc()
    RETURNS trigger AS
$$
BEGIN
UPDATE Sport_place SET name = NEW.name, address = NEW.address
WHERE id = OLD.id;
UPDATE Arena SET area = NEW.area
WHERE place_id = OLD.id;
RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER arena_update_trigger
    INSTEAD OF UPDATE ON Arena_info
                          FOR EACH ROW
                          EXECUTE PROCEDURE arena_update_trigger_fnc();

CREATE OR REPLACE FUNCTION stadium_update_trigger_fnc()
    RETURNS trigger AS
$$
BEGIN
UPDATE Sport_place SET name = NEW.name, address = NEW.address
WHERE id = OLD.id;
UPDATE Stadium SET capacity = NEW.capacity
WHERE place_id = OLD.id;
RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER stadium_update_trigger
    INSTEAD OF UPDATE ON Stadium_info
                          FOR EACH ROW
                          EXECUTE PROCEDURE stadium_update_trigger_fnc();

CREATE OR REPLACE FUNCTION court_update_trigger_fnc()
    RETURNS trigger AS
$$
BEGIN
UPDATE Sport_place AS sp SET name = NEW.name, address = NEW.address
WHERE sp.id = OLD.id;
UPDATE Court SET coating_type_id = NEW.coating_type_id
WHERE place_id = OLD.id;
RETURN NEW;
END
$$
LANGUAGE 'plpgsql';
CREATE OR REPLACE TRIGGER court_update_trigger
    INSTEAD OF UPDATE ON Court_info
                          FOR EACH ROW
                          EXECUTE PROCEDURE court_update_trigger_fnc();


